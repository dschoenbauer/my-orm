<?php namespace CTIMT\MyOrm\Adapter;

use CTIMT\MyOrm\Entity\HasFilterInterface;
use CTIMT\MyOrm\Model\Model;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-26 at 15:49:18.
 */
class FilterTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Filter
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Filter;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testVisitModel()
    {
        
        $entity = $this
                ->getMockBuilder(HasFilterInterface::class)
                ->getMock();
        $entity                
                ->expects($this->exactly(1))
                ->willReturn([])
                ->method('getFilters');

        
        $model = $this->getMockBuilder(Model::class)
                ->disableOriginalConstructor()
                ->getMock();
        $model
                ->expects($this->exactly(2))
                ->method('getEntity')
                ->willReturn($entity);
        $model
                ->expects($this->exactly(1))
                ->method('attach');
        
        $model
                ->expects($this->exactly(1))
                ->willReturn([])
                ->method('getAttribute');

        $this->object->visitModel($model);
    }

    public function testVisitSelectNoSearchKeyValue()
    {
        $select = $this->getMockBuilder(Select::class)->getMock();
        $select
                ->expects($this->exactly(0))
                ->method('setWhere');
        $this->object->visitSelect($select);
    }    
    
    public function testVisitSelect()
    {
        $select = $this->getMockBuilder(Select::class)->getMock();
        $select
                ->expects($this->exactly(1))
                ->method('setWhere');
        $this->object->setSearchKeyValue(['test'=>'value']);
        $this->object->visitSelect($select);
        $this->assertEquals("100", $select->getWhere()->getData());
    }    
    
    /**
     * @covers CTIMT\MyOrm\Adapter\Filter::addFilterToLayout
     * @todo   Implement testAddFilterToLayout().
     */
    public function testAddFilterToLayout()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CTIMT\MyOrm\Adapter\Filter::getSearchKeyValue
     * @todo   Implement testGetSearchKeyValue().
     */
    public function testGetSearchKeyValue()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CTIMT\MyOrm\Adapter\Filter::setSearchKeyValue
     * @todo   Implement testSetSearchKeyValue().
     */
    public function testSetSearchKeyValue()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CTIMT\MyOrm\Adapter\Filter::getValidFields
     * @todo   Implement testGetValidFields().
     */
    public function testGetValidFields()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CTIMT\MyOrm\Adapter\Filter::setValidFields
     * @todo   Implement testSetValidFields().
     */
    public function testSetValidFields()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
