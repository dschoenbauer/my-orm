<?php namespace CTIMT\MyOrm\Adapter;

use CTIMT\MyOrm\Enum\LayoutKeys;
use CTIMT\MyOrm\Enum\ModelEvents;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-26 at 16:49:40.
 */
class AliasTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Alias
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Alias;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @expectedException \Exception
     */
    public function testVisitModelCallAttach()
    {
        $entity = $this->getMockBuilder('\CTIMT\MyOrm\Entity\AbstractEntity')
            ->getMock();
        $entity->method('getAllFields')
            ->willReturn(['TestA', 'TestB']);

        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')
                ->disableOriginalConstructor()->getMock();

        $model->method('getEntity')
            ->willReturn($entity);
        $model->method('getAttribute')
            ->willReturn(['TestA' => 'TestC']);

        $model->method('attach')
            ->will($this->throwException(new \Exception));

        $this->object->visitModel($model);
    }

    public function testVisitModelNoAlias()
    {
        $entity = $this->getMockForAbstractClass('\CTIMT\MyOrm\Entity\AbstractEntity');

        $entity->method('getAllFields')
            ->willReturn(['TestA', 'TestB']);

        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')
                ->disableOriginalConstructor()->getMock();

        $model->method('getEntity')
            ->willReturn($entity);
        $model->method('getAttribute')
            ->willReturn([]);

        $this->assertNull($this->object->visitModel($model));
    }

    public function testUpdateLayoutCollectionAppliedWithData()
    {
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')
                ->disableOriginalConstructor()->setMethods(null)->getMock();

        $entity = $this->getMockBuilder('\CTIMT\MyOrm\Entity\AbstractEntity')
            ->getMock();
        $entity->method('getName')->willReturn('test');

        $model->setEntity($entity)->setData(['test' => [['test' => 'value1'], ['test' => 'value2']]]);
        $this->assertTrue($this->object->update($model, ModelEvents::LAYOUT_COLLECTION_APPLIED));
    }

    public function testUpdateLayoutEntityApplied()
    {
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')
                ->disableOriginalConstructor()->setMethods(null)->getMock();

        $entity = $this->getMockBuilder('\CTIMT\MyOrm\Entity\AbstractEntity')
            ->getMock();
        $entity->method('getName')->willReturn('test');

        $model->setEntity($entity)->setData(['test' => [['test' => 'value1'], ['test' => 'value2']]]);
        $this->assertTrue($this->object->update($model, ModelEvents::LAYOUT_ENTITY_APPLIED));
    }

    public function testUpdateValidate()
    {
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')
                ->disableOriginalConstructor()->setMethods(null)->getMock();

        $entity = $this->getMockBuilder('\CTIMT\MyOrm\Entity\AbstractEntity')
            ->getMock();
        $entity->method('getName')->willReturn('test');

        $model->setEntity($entity)->setData(['test' => [['test' => 'value1'], ['test' => 'value2']]]);
        $this->assertTrue($this->object->update($model, ModelEvents::VALIDATE));
    }

    public function testUpdateLayoutCollectionAppliedNoData()
    {
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')
                ->disableOriginalConstructor()->setMethods(null)->getMock();

        $entity = $this->getMockBuilder('\CTIMT\MyOrm\Entity\AbstractEntity')
            ->getMock();
        $entity->method('getName')->willReturn('test');

        $model->setEntity($entity)->setData(['test' => []]);
        $this->assertTrue($this->object->update($model, ModelEvents::LAYOUT_COLLECTION_APPLIED));
    }

    public function testAddAliasToCollectionLayout()
    {
        $data = ["test" => [["newKey" => "value"]]];
        $mapping = ['key' => 'newKey'];
        $this->object->setMapping($mapping);
        $result = $this->object->addAliasToCollectionLayout($data, 'test');
        $this->assertArrayHasKey(LayoutKeys::META_KEY, $result);
        $this->assertArrayHasKey(Alias::FIELD, $result[LayoutKeys::META_KEY]);
        $this->assertEquals($mapping, $result[LayoutKeys::META_KEY][Alias::FIELD]);
    }

    public function testAddAliasToEntityLayout()
    {
        $data = ["newKey" => "value"];
        $mapping = ['key' => 'newKey'];
        $this->object->setMapping($mapping);
        $result = $this->object->addAliasToEntityLayout($data);
        $this->assertArrayHasKey(LayoutKeys::META_KEY, $result);
        $this->assertArrayHasKey(Alias::FIELD, $result[LayoutKeys::META_KEY]);
        $this->assertEquals($mapping, $result[LayoutKeys::META_KEY][Alias::FIELD]);
    }

    public function testReverseAlias()
    {
        $data = ["newKey" => "value"];
        $this->object->setMapping(['key' => 'newKey']);
        $result = $this->object->reverseAlias($data);
        $this->assertArrayHasKey('key', $result);
        $this->assertArrayNotHasKey('newKey', $result);
    }

    public function testRemapData()
    {
        $data = [["key" => "value"]];
        $this->object->setMapping(['key' => 'newKey']);
        $result = $this->object->remapData($data)[0];
        $this->assertArrayHasKey('newKey', $result);
        $this->assertArrayNotHasKey('key', $result);
    }

    public function testRemapRow()
    {
        $data = ["key" => "value"];
        $mapping = ['key' => 'newKey'];
        $result = $this->object->remapRow($data, $mapping);
        $this->assertArrayHasKey('newKey', $result);
        $this->assertArrayNotHasKey('key', $result);
    }

    public function testValidateMappingWithGoodFields()
    {
        $validFields = ['key'];
        $userAliases = ['key' => 'newKey'];
        $validAliases = $this->object->validateMapping($userAliases, $validFields);
        $this->assertEquals($userAliases, $validAliases);
    }

    /**
     * @expectedException \CTIMT\MyOrm\Exception\Adapter\InvalidAliasKeyException
     */
    public function testValidateMappingWithABadFields()
    {
        $validFields = ['key'];
        $userAliases = ['notAkey' => 'newKey'];
        $this->object->validateMapping($userAliases, $validFields);
    }

    public function testMapping()
    {
        $test = ['test' => 'test'];
        $this->assertEquals($test, $this->object->setMapping($test)->getMapping());
    }
}
