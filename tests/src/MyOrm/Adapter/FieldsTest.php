<?php namespace CTIMT\MyOrm\Adapter;

use CTIMT\MyOrm\Enum\LayoutKeys;
use CTIMT\MyOrm\Enum\ModelEvents;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-03 at 17:14:57.
 */
class FieldsTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Fields
     */
    protected $object;

    protected function setUp()
    {
        $this->object = new Fields;
    }

    protected function tearDown()
    {
        
    }

    public function testVisitModel()
    {
        $value = ['test', 'test2'];

        $entity = $this->getMockBuilder('\CTIMT\MyOrm\Entity\AbstractEntity')
            ->getMock();
        $entity->expects($this->once())
            ->method('getAllFields')
            ->willReturn($value);

        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')
                ->disableOriginalConstructor()->getMock();
        $model->expects($this->once())->method('getEntity')->willReturn($entity);
        $model->expects($this->once())->method('getAttribute')->willReturn('test,test2');
        $model->expects($this->once())->method('attach');
        $model->setEntity($entity);

        $this->object->visitModel($model);
    }

    public function testUpdateObserver()
    {
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')
                //->setMethods(null)
                ->disableOriginalConstructor()->getMock();
        $model->expects($this->once())->method('getData')->willReturn([]);
        $model->expects($this->once())->method('setData');
        $this->object->setEventNames(['validate'])->update($model, 'validate');
    }

    public function testUpdateObserverNotCalled()
    {
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')
                //->setMethods(null)
                ->disableOriginalConstructor()->getMock();
        $model->expects($this->never())->method('getData')->willReturn([]);
        $model->expects($this->never())->method('setData');
        $this->object->setEventNames(['No'])->update($model, 'Yes');
    }

    public function testVisitSelectInvalid()
    {
        $selectMock = $this->getMockBuilder('CTIMT\MyOrm\Adapter\Select')
                ->setMethods(null)->getMock();
        $selectMock->expects($this->never())
            ->method('setFields');
        $this->object->visitSelect($selectMock);
    }

    public function testVisitSelectValid()
    {
        $fields = ['test', 'test2'];
        $selectMock = $this->getMockBuilder('CTIMT\MyOrm\Adapter\Select')->getMock();
        $selectMock->expects($this->once())
            ->method('setFields');

        $this->object
            ->setValidFields($fields)
            ->setUserLimitedFields($fields)
            ->visitSelect($selectMock);
    }

    public function testParseFields()
    {
        $this->assertEquals([], $this->object->parseFields(''));
        $this->assertEquals(['test'], $this->object->parseFields('test'));
        $this->assertEquals(['test', 'test'], $this->object->parseFields('test,test'));
    }

    public function testShowFields()
    {
        $data = [];
        $validFields = ['shown', 'hidden'];
        $userFields = ['shown'];
        $final = [LayoutKeys::META_KEY => [
                Fields::FIELDS => [
                    Fields::FIELDS_ACTIVE => ['shown'],
                    Fields::FIELDS_HIDDEN => ['hidden'],
                ]
        ]];
        $this->assertEquals($final, $this
                ->object
                ->setValidFields($validFields)
                ->setUserLimitedFields($userFields)
                ->showFields($data)
        );
    }

    /**
     * @expectedException \CTIMT\MyOrm\Exception\Adapter\InvalidFieldsFieldException
     */
    public function testUserLimitedFieldsNoFields()
    {
        $this->object->setValidFields([])->setUserLimitedFields(['test']);
    }

    /**
     * @expectedException \CTIMT\MyOrm\Exception\Adapter\InvalidFieldsFieldException
     * @expectedExceptionMessage Fields: badField is invalid. Valid fields are: goodField
     */
    public function testUserLimitedFieldsBadFields()
    {
        $this->object->setValidFields(['goodField'])->setUserLimitedFields(['badField']);
    }

    public function testUserLimitedFieldsGoodFields()
    {
        $value = ['goodFields'];
        $this->assertEquals($value, $this
                ->object
                ->setValidFields($value)
                ->setUserLimitedFields($value)
                ->getUserLimitedFields()
        );
    }

    public function testValidFields()
    {
        $validFields = ['testField1', 'testField2'];
        $this->assertEquals($validFields, $this->object->setValidFields($validFields)->getValidFields());
    }
}
