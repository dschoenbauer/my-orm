<?php namespace CTIMT\MyOrm\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-26 at 15:49:20.
 */
class QueryTest extends \PHPUnit_Extensions_Database_TestCase
{

    /**
     * @var Query
     */
    protected $object;

    /**
     *  @var PDO
     */
    private $pdo;

    public function __construct()
    {
        parent::__construct($name = null, $data = [], $dataName = "");
        $this->pdo = new \PDO('sqlite::memory:');
    }

    /**
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    protected function getConnection()
    {
        $conn = $this->createDefaultDBConnection($this->pdo, 'sqlite');
        $this->initDatabase();
        return $conn;
    }

    public function getData()
    {
        return [
            1 => ["id" => 1, "content" => "Hello buddy!", "user" => "joe", "created" => "2010-04-24 17:15:23"],
            2 => ["id" => 2, "content" => "I like it!", "user" => "nancy", "created" => "2010-04-26 12:14:20"]
        ];
    }

    public function initDatabase()
    {
        $query = "CREATE TABLE IF NOT EXISTS `guestbook` (
                 `id` INTEGER PRIMARY KEY,
                 `content` VARCHAR(1000),
                 `user` VARCHAR(60),
                 `created` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                 `activated` TINYINT(1) NOT NULL DEFAULT '0',
                 `activation_code` VARCHAR(10),
                 `banned` TINYINT(1) NOT NULL DEFAULT '0')";

        $this->pdo->query($query);
    }

    /**
     * @return PHPUnit_Extensions_Database_DataSet_IDataSet
     */
    public function getDataSet()
    {
        $file = dirname(__FILE__) . '/../../../files/test/guestbook-seed.xml';
        return $this->createFlatXMLDataSet($file);
    }

    protected function setUp()
    {
        $this->getConnection()->createDataSet();
        $this->object = new Query($this->pdo);
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testAdapter()
    {
        $query = new Query($this->pdo); //for coverage
        $this->assertEquals($this->pdo, $query->getAdapter());
        $this->assertEquals($this->pdo, $query->setAdapter($this->pdo)->getAdapter());
    }

    public function testInsertBasicWorks()
    {
        $this->assertEquals(2, $this->getConnection()->getRowCount('guestbook'), "Pre-Condition");
        $id = $this->object->insert('guestbook', ['content' => 'test']);
        $this->assertEquals(3, $this->getConnection()->getRowCount('guestbook'));
        $this->assertEquals(3, $id);
    }

    /**
     * @expectedException \CTIMT\MyOrm\Exception\Adapter\NonComittableException
     */
    public function testInsertWithError()
    {
        $id = $this->object->insert('notAValidTable', ['content' => 'test']);
    }

    public function testUpdateNoWhere()
    {
        $this->object->update('guestbook', ['content' => 'updated']);
        $this->assertEquals(2, $this->getConnection()->getRowCount('guestbook'));
    }

    public function testUpdateWithWhere()
    {
        $this->assertTrue($this->object->update('guestbook', ['content' => 'updated'], $this->getWhereMock()));
        $this->assertEquals(2, $this->getConnection()->getRowCount('guestbook'));
    }

    /**
     * @expectedException \CTIMT\MyOrm\Exception\Adapter\NonComittableException
     */
    public function testUpdateWithError()
    {
        $this->object->update('notATable', ['content' => 'updated']);
    }

    public function testDeleteNoWhere()
    {
        $this->assertEquals(2, $this->getConnection()->getRowCount('guestbook'), 'pre-condition');
        $this->object->delete('guestbook');
        $this->assertEquals(0, $this->getConnection()->getRowCount('guestbook'));
    }

    public function testDeleteWithWhere()
    {

        $this->assertEquals(2, $this->getConnection()->getRowCount('guestbook'), 'pre-condition');
        $this->object->delete('guestbook', $this->getWhereMock());
        $this->assertEquals(1, $this->getConnection()->getRowCount('guestbook'));
    }

    /**
     * @expectedException \CTIMT\MyOrm\Exception\Adapter\NonComittableException
     */
    public function testDeleteWithError()
    {
        $this->object->delete('NotATable');
    }

    public function testSelectDefault()
    {
        $val = $this->object->select('guestbook', ['id', 'content']);
        $this->assertEquals($this->getConnection()->getRowCount('guestbook'), count($val));
    }

    public function testSelectFlat()
    {
        $val = $this->object->select('guestbook', ['id', 'content'], null, true);
        $this->assertEquals($this->getConnection()->getRowCount('guestbook'), count($val));
    }

    public function testSelectFlatObjectWhere()
    {
        $val = $this->object->select('guestbook', ['id', 'content'], $this->getWhereMock(), true);
        $this->assertEquals($this->getConnection()->getRowCount('guestbook'), count($val));
    }

    public function testSelectFlatObject()
    {
        $val = $this->object->select('guestbook', ['id', 'content'], $this->getWhereMock(), true, \PDO::FETCH_OBJ);
        $this->assertEquals(1, count($val));
    }

    public function testArrayToKeyedArray()
    {
        $data = ['test' => 'value'];
        $this->assertEquals(['test = :test'], $this->object->arrayToKeyedArray($data));
    }

    private function getWhereMock($statement = 'id = :id', $parameters = ['id' => 1])
    {
        $where = $this->getMockBuilder('CTIMT\MyOrm\Adapter\WhereStatement')
                ->disableOriginalConstructor()->getMock();
        $where->method('getStatment')
            ->willReturn($statement);

        $where->method('getParameters')
            ->willReturn($parameters);
        return $where;
    }
}
