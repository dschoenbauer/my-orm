<?php namespace CTIMT\MyOrm\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-26 at 15:49:20.
 */
class DefaultValueTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var DefaultValue
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DefaultValue;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testVisitModel()
    {
        $entity = $this->getMockBuilder('\CTIMT\MyOrm\Entity\HasDefaultValuesInterface')->getMock();
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')->disableOriginalConstructor()->getMock();
        $model->expects($this->any())->method('getEntity')->willReturn($entity);
        $model->expects($this->once())->method('attach');
        $this->object->visitModel($model);
    }
    
    public function testDefaultValueOverridden(){
        $data = ['testField1'=>'actualValue','testField2'=>'actualValue'];
        $defaultValues = ['testField1'=>'defaultValue'];
        $expected = $data;
        $this->assertEquals($expected, $this->object->getDefaultValue($data, $defaultValues));
    }
    
    public function testDefaultValueMissingDefaultValue(){        
        $data = ['testField1'=>'actualValue','testField2'=>'actualValue'];
        $defaultValues = ['testField3'=>'defaultValue'];
        $expected = [
            'testField1'=>'actualValue',
            'testField2'=>'actualValue',
            'testField3'=>'defaultValue'];
        $this->assertEquals($expected, $this->object->getDefaultValue($data, $defaultValues));
    }

    public function testUpdate()
    {
        $data = ['testField1'=>'actualValue','testField2'=>'actualValue'];
        $defaultValues = ['testField1'=>'defaultValue'];
        $entity = $this->getMockBuilder('\CTIMT\MyOrm\Entity\HasDefaultValuesInterface')->getMock();
        $entity->expects($this->once())->method('getDefaultValues')->willReturn($defaultValues);
            
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')->disableOriginalConstructor()->getMock();
        $model->expects($this->once())->method('getEntity')->willReturn($entity);
        $model->expects($this->once())->method('getData')->willReturn($data);
        $model->expects($this->once())->method('setData');
        
        $this->object->setEventNames(['test'])->update($model, 'test');
    }
}
