<?php namespace CTIMT\MyOrm\Adapter;

use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-26 at 15:49:19.
 */
class ClearIdTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var ClearId
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ClearId;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testVisitModel()
    {
        $mockModel = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')
                ->disableOriginalConstructor()->getMock();
        $mockModel->expects($this->once())
            ->method('attach');

        $this->object->visitModel($mockModel);
    }

    public function testUpdateNoMatchingEventName()
    {
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')
                ->disableOriginalConstructor()->getMock();
        $model->expects($this->never())
            ->method('setData');
        $model->expects($this->never())
            ->method('getData');
        $this->object->update($model, 'notAnEvent');
    }
    
    public function testUpdateMatchingEventName()
    {
        $data = ['test'=>'removeMe','data'=>'leaveMe'];
        $final = ['data'=>'leaveMe'];
        $entity = $this->getMock('\CTIMT\MyOrm\Entity\AbstractEntity');
        $entity->method('getIdField')
             ->will($this->returnValue('test'));
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')
            ->disableOriginalConstructor()
            ->setMethods(null)
            ->getMock();
        $model->setEntity($entity)->setData($data);
        $this->object->setEventNames(['listenToMe']);
        $this->object->update($model, 'listenToMe');
        $this->assertEquals($final,$model->getData());
    }

    public function testClearField()
    {
        $data = ['id' => 1, 'data' => 'LeaveMe'];
        $final = ['data' => 'LeaveMe'];
        $this->assertEquals($final, $this->object->clearField($data, 'id'));
    }

    public function testClearNoField()
    {
        $data = ['data' => 'LeaveMe'];
        $final = ['data' => 'LeaveMe'];
        $this->assertEquals($final, $this->object->clearField($data, 'id'));
    }

    public function testClearArrayOfArrays()
    {
        $data = ['data' => 'LeaveMe'];
        $final = ['data' => 'LeaveMe'];
        $this->assertEquals($final, $this->object->clearField($data, 'id'));
    }
    
    public function testEventNames(){
        $eventNames = ['test','valdiate'];
        $this->assertEquals($eventNames, $this->object->setEventNames($eventNames)->getEventNames());
    }
}
