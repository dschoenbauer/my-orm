<?php namespace CTIMT\MyOrm\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-26 at 15:44:44.
 */
class RequiredTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Required
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Required;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

 public function testVisitModel()
    {
        
        $entity = $this->getMockBuilder('\CTIMT\MyOrm\Entity\HasRequiredFieldsInterface')->getMock();
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')->disableOriginalConstructor()->getMock();
        $model->expects($this->once())->method('getEntity')->willReturn($entity);
        $model->expects($this->once())->method('attach');
        $this->object->visitModel($model);
    }
    
    public function testVisitModelInCorrectType()
    {
        
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')->disableOriginalConstructor()->getMock();       
        $model->expects($this->never())->method('attach');
        $this->object->visitModel($model);
    }


    public function testValidateSuccess()
    {
        $data  = [
            'number'=>1,
            'text'=>'someText',
            'boolean'=> true,
        ];
        $fields = ['number'];
        $this->assertTrue($this->object->validate(array_keys($data), $fields));
    }
    
    /**
     * @expectedException CTIMT\MyOrm\Exception\Adapter\MissingPayloadKeyException
     * @expectedExceptionCode 422
     * @expectedExceptionMessage Field:notPresent is missing. Required fields are: number,notPresent
     */
    
    public function testValidateFailure()
    {
        $data  = [
            'number'=>1,
            'text'=>'someText',
            'boolean'=> true,
        ];
        $fields = ['number','notPresent'];
        $this->assertTrue($this->object->validate(array_keys($data), $fields));
    }
    
    public function testUpdateSuccess()
    {
        $entity = $this->getMockBuilder('\CTIMT\MyOrm\Entity\HasRequiredFieldsInterface')->getMock();
        $entity->expects($this->once())->method('getRequiredFields')->willReturn([]);
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')->disableOriginalConstructor()->getMock();
        $model->expects($this->once())->method('getEntity')->willReturn($entity);
        $model->expects($this->once())->method('getData')->willReturn([]);
        
        $this->object->setEventNames(['test'])->update($model, 'test');
    }
    
    public function testUpdateInvalidEventName()
    {
        $entity = $this->getMockBuilder('\CTIMT\MyOrm\Entity\HasRequiredFieldsInterface')->getMock();
        $entity->expects($this->never())->method('getRequiredFields')->willReturn([]);
        $model = $this->getMockBuilder('\CTIMT\MyOrm\Model\Model')->disableOriginalConstructor()->getMock();
        $model->expects($this->never())->method('getEntity')->willReturn($entity);
        $model->expects($this->never())->method('getData')->willReturn([]);
        $this->object->setEventNames(['testNotMe'])->update($model, 'test');
    }
}
